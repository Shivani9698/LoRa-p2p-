#include <SPI.h>
#include <LoRa.h>
#include <Stepper.h>

const int stepsPerRevolution = 2048;  // change this to fit the number of steps per revolution

// define the pins used by the transceiver module
#define ss 5
#define rst 14
#define dio0 2
#define IN1 26
#define IN2 21
#define IN3 12
#define IN4 13
Stepper myStepper(stepsPerRevolution, IN1, IN3, IN2, IN4);

int counter = 0;

void setup() {
  myStepper.setSpeed(10); // Set stepper motor speed in steps per second

  // initialize Serial Monitor
  Serial.begin(115200);
  while (!Serial);
  Serial.println("LoRa Sender");

  // setup LoRa transceiver module
  LoRa.setPins(ss, rst, dio0);

  // replace the LoRa.begin(---E-) argument with your location's frequency
  // 433E6 for Asia
  // 866E6 for Europe
  // 915E6 for North America
  while (!LoRa.begin(868E6)) {
    Serial.println(".");
    delay(500);
  }
  // Change sync word (0xF3) to match the receiver
  // The sync word assures you don't get LoRa messages from other LoRa transceivers
  // ranges from 0-0xFF
  LoRa.setSyncWord(0xF3);
  Serial.println("LoRa Initializing OK!");
}

void loop() {
  Serial.print("Sending packet: ");
  Serial.println(counter);

  // Send LoRa packet to receiver
  LoRa.beginPacket();
  Serial.println("CounterClockwise");
  LoRa.println("CounterClockwise");
  myStepper.step(stepsPerRevolution); // Move clockwise one revolution
  delay(1000);

  // Step one revolution in the other direction
  Serial.println("Clockwise");
  LoRa.println("Clockwise");
  myStepper.step(-stepsPerRevolution); // Move counterclockwise one revolution
  delay(1000);

  LoRa.print(counter);
  LoRa.endPacket();

  counter++;

  delay(1000); // Delay before sending the next packet
}
